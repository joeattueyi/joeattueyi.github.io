{"name":"why joe? seriously, why?","tagline":"jattueyi@gmail.com","body":"***\r\n### Pattern Matching on Arrays in Javascript\r\n\r\nI was working through a quite accessible AI book called AI Algorithms, Data Structures, and Idioms in Prolog, Lisp, \r\nand Java by Luger and Stubblefield, during my flirtations with Prolog and stumbled across an implementation of pattern matching in Common Lisp that was very elegant and so decided to port it Javascript.\r\n\r\nMy implementation allows you to pass unbound variables as sentinel values that can match against any data\r\n \r\n\r\n```\r\n/**  pattern matching on arrays in js \r\n *  by Joe Attueyi  */\r\n\r\nvar assert = require(\"assert\");\r\n\r\n/* a few helper functions */\r\nvar typeString = function(x){\r\n    return Object.prototype.toString.call(x) ;\r\n}\r\n\r\nvar isObj = function(x){\r\n    return typeString(x)  === \"[object Object]\";\r\n}\r\n\r\nvar isArray = function(x){\r\n    return typeString(x)  === \"[object Array]\";\r\n}\r\nvar matchAtom = function(l1, l2){\r\n    return l1 === l2 || typeof(l1) === \"undefined\"|| typeof(l2) === \"undefined\";\r\n}\r\n\r\nvar isAtom = function(l){\r\n    if (typeof(l) === \"string\" ||\r\n            typeof(l) === \"number\" ||\r\n            typeof(l) === \"undefined\" ||\r\n            typeof(l) === \"boolean\"){\r\n        return true;\r\n    }else{ false; }\r\n}\r\n\r\n/* check if 2 arrays match */\r\n\r\nvar match = function(l1, l2){\r\n    if( isAtom(l1) || isAtom(l2) ){         \r\n        return  matchAtom(l1,l2);\r\n    }\r\n    else if( l1.length !== l2.length){ return false;\r\n    }\r\n    else if(isArray(l1) && l1.length === 0 && isArray(l2) && l2.length === 0){\r\n        return true;\r\n    }\r\n    else if (l2.length !== 0  || l1.length !== 0){\r\n       return match(l1.slice(0,1)[0], l2.slice(0,1)[0]) && match(l1.slice(1), l2.slice(1));\r\n    }\r\n}\r\n\r\nvar getMatches = function(l, db){\r\n    var res = [];    \r\n    for(var i=0; i<db.length; i++){\r\n        if(match(l, db[i])){\r\n            res.push(db[i]);\r\n        }\r\n    }\r\n     return res;\r\n}\r\n```\r\n\r\n\r\nYou can use this to make queries that match structured data in a database as shown below.\r\nI'd like to make this work for data structures other than Lists/Arrays/Vectors, my experience with the\r\npattern matching and the closely related unification have been in languages that used Lists for everything.\r\n\r\nYou can use pattern matching as replacement for control flow as is commonly done is languages such as ML, \r\nbut for it to really shine in Javascript you'd need pattern matching on objects as well\r\n\r\n\r\n```\r\nvar _p;\r\n\r\nvar db = [\r\n    [[\"lovelace\", \"ada\"], 50000, 1234],\r\n    [[\"turing\", \"alan\"], 45000, 3927],\r\n    [[\"shelley\", \"mary\"], 3500, 2850],\r\n    [[\"vonNeumann\", \"john\"], 40000, 7955],\r\n    [[\"simon\", \"herbert\"], 50000, 1374],\r\n    [[\"mccarthy\", \"john\"], 48000, 2864],\r\n    [[\"russell\", \"bertrand\"], 35000, 2950]];\r\n\r\ngetMatches([[\"turing\", \"alan\"], 45000, 3927], db);\r\n// matches [[\"turing\", \"alan\"], 45000, 3927]\r\n\r\ngetMatches([_p, 50000, _p], db);\r\n// matches [[\"lovelace\", \"ada\"], 50000, 1234] & [[\"simon\", \"herbert\"], 50000, 1374]\r\n\r\ngetMatches([[_p, \"john\"], _p, _p], db);\r\n// matches [[\"mccarthy\", \"john\"], 48000, 2864] & [[\"vonNeumann\", \"john\"], 40000, 7955]\r\n\r\n\r\nassert( match([\"likes\", \"bill\", \"wine\"], [\"likes\", \"bill\", \"wine\"]) == true);\r\n\r\nassert( match([\"likes\", \"bill\", \"wine\"], [\"likes\", \"bill\", \"milk\"]) == false);\r\n\r\nvar _a;\r\nassert( match([\"likes\", \"bill\", _a], [\"likes\", \"bill\", \"wine\"]) == true);\r\nassert( match([\"likes\", _a, \"wine\"], [\"likes\", \"bill\", _a]) == true);\r\n\r\nassert( match([\"likes\", \"bill\", _a], [\"likes\", \"bill\", [\"prolog\", \"lisp\", \"smalltalk\"]]) == true)\r\n\r\nassert( match([\"likes\", _a], [\"likes\", \"bill\", \"wine\"]) == false );\r\n\r\n```\r\n***\r\n\r\n***\r\n### A Very Basic Fibres Implementation in Javascript Using Generators\r\n\r\nI've been playing around with concurrency models in different languages and have quite enjoyed learning\r\nabout them.\r\n\r\nFor my money the CSP derived ones in ML,Clojure and Go seem to me to be the most flexible \r\nand allow for you to build higher abstractions on top of them. I think Rich Hickey has it right, \r\nwhen he talks about the splitting of conveyance and execution being beneficial.\r\n\r\nAnyways here is a hacky first attempt at a form of concurrency in javascript.\r\nIm using generators so that my functions can park and unpark their execution and context, this coupled with a \r\nrun loop allows one to simulate concurrently executing functions in javascript\r\n\r\n\r\nHere is the implementation.\r\n```\r\nfunction fibre(){\r\n\r\n    return {id: gen_id(), context: {}, active: false, body: null};\r\n}\r\n\r\n\r\nfunction lib_fibre(){\r\n    var fibre_q = {};\r\n\r\n\r\n    return{\r\n        gen_id : function(){\r\n            return Math.floor(Math.random() * 10000000);\r\n        },\r\n        spawn: function(fn){\r\n            _f = fibre();\r\n            _f.body = fn();\r\n            fibre_q[_f.id] = _f;\r\n        },\r\n\r\n        go: function(){\r\n            while (Object.keys(fibre_q).length > 0){\r\n                //l(fibre_q);\r\n                for(var v in fibre_q){\r\n                    //l(v , fibre_q[v] );\r\n                    var fn = fibre_q[v].body;\r\n                    //l(fn);\r\n                    var ref = fn.next();\r\n                    //l(ref);\r\n\r\n                    if(ref.done){ \r\n                        //l(\"in delete\"); \r\n                        delete fibre_q[v];\r\n                    }\r\n                    //fibre_q[v].body = fn.next;\r\n\r\n                }\r\n            } \r\n        },\r\n    };\r\n}\r\n\r\n\r\n```\r\n\r\nAnd here is the implementation in action.\r\n```\r\nvar lf = lib_fibre();\r\n\r\nvar a = function *(){\r\n    yield l(\"Hi\");\r\n    yield l(\"Joe\");\r\n    yield l(\"Welcome\");\r\n    yield l(\"!!!!!!\");\r\n}\r\nvar b = function *(){\r\n    var x = 10;\r\n\r\n    while (x > 0){\r\n        yield l(x);\r\n        x -= 1;\r\n    }\r\n}\r\nvar c = function *(){\r\n    yield l(\"END\");\r\n}\r\n\r\nlf.spawn(c);\r\n\r\nlf.spawn(a);\r\n\r\nlf.spawn(b);\r\nlf.go();\r\n```\r\n\r\nRunning this, you would see the interleaving of the functions. This is just a basic implementation, one \r\ncould easily couple these with queues independent of processes and you could start to emulate CSP.\r\nThankfully, through the wonderful magic of open source someone has already done [this](https://github.com/ubolonton/js-csp) for you :)\r\n\r\n***\r\n***\r\n### I WROTE A LISP\r\n\r\nA few weeks ago, i spent some time writing a Lisp in Javascript. This was due to having enjoyed writing Clojure and researching Lisps in general. I watched a few of the SICP lectures online and read Peter Norvig's [How to Write a Lisp Interpreter in Python](http://norvig.com/lispy.html) for some pointers and went on my way.\r\n\r\nThe lisp which I've imaginatively named Joelisp is a bit different to standard Lisps in terms of syntax as it inherits a lot of Clojure syntax and also uses [mori's](https://github.com/swannodette/mori) data structures. \r\n\r\nIt differs from most Lisps in that I have special semantics for evaluating code in depth first order. Code wrapped in an rx function will figure out the implicit dependency graph in your code and will run your code in topologically sorted order.\r\n\r\nThis kind of feature would be useful for doing reactive programming as it ensures that the values in variables propagate through the whole program even after the variable is mutated. \r\n\r\nIt also lets you make forward declarations on variables that don't exist yet which is pretty handy.\r\n\r\nAn example use of the rx tag is\r\n\r\n```\r\n(rx \r\n    (def c (+ a b))\r\n    (def d (* a b c))\r\n    (def b (+ a 1))\r\n    (def a 1)\r\n    (set! a 100)\r\n   )\r\n\r\n(print a)\r\n(print b)\r\n(print c)\r\n(print d)\r\n\r\n```\r\n\r\nreturns you \r\n\r\n```\r\n100\r\n101\r\n201\r\n2030100\r\n```\r\n\r\npretty cool huh!\r\n\r\n***\r\n\r\n***\r\n### HE'S BACK\r\n```\r\n$ say \"why joe???\"\r\n```\r\n\r\nI'm coming out of blogging retirement trying to relive the glory days of the late 00s/early 10s. I can hear u asking why anyone would want to do that, and i'm not sure why either but hopefully we can find out together.\r\n\r\nTil next time \r\n***","google":"UA-46776176-1","note":"Don't delete this file! It's used internally to help with page regeneration."}
{"name":"why joe? seriously, why?","tagline":"jattueyi@gmail.com","body":"***\r\n### I WROTE A LISP\r\n\r\nA few weeks ago, i spent some time writing a Lisp in javascript. This was due to having enjoyed writing clojure and researching Lisps in general. I watched a few of the SICP lectures and online and read Peter Norvig's [How to Write a Lisp Interpreter in Python](http://norvig.com/lispy.html) for pointers and went on my way.\r\n\r\nThe lisp which I've imaginatively named Joelisp is a bit different to standard Lisps in terms of syntax as it inherits a lot of Clojure syntax and also uses [mori's](https://github.com/swannodette/mori) data structures. \r\n\r\nIt differs from most Lisps in that I have special semantics for evaluating code in depth first order. Code wrapped in an rx function will figure out the implicit dependency graph in your code and will run your code in topologically sorted order.\r\n\r\nThis kind of feature would be useful for doing reactive programming as it ensures that the values in variables propagate through the whole program even after the variable is mutated. \r\n\r\nIt also lets you make forward declarations on variables that don't exist yet which is pretty handy.\r\n\r\nAn example use of the rx tag is\r\n\r\n```\r\n(rx \r\n    (def c (+ a b))\r\n    (def d (* a b c))\r\n    (def b (+ a 1))\r\n    (def a 1)\r\n    (set! a 100)\r\n   )\r\n\r\n(print a)\r\n(print b)\r\n(print c)\r\n(print d)\r\n\r\n```\r\n\r\nreturns you \r\n\r\n```\r\n100\r\n101\r\n201\r\n2030100\r\n```\r\n\r\npretty cool huh!\r\n\r\n***\r\n\r\n***\r\n```\r\n$ say \"why joe???\"\r\n```\r\n\r\nI'm coming out of blogging retirement trying to relive the glory days of the late 00s/early 10s. I can hear u asking why anyone would want to do that, and i'm not sure why either but hopefully we can find out together.\r\n\r\nTil next time \r\n***","google":"UA-46776176-1","note":"Don't delete this file! It's used internally to help with page regeneration."}